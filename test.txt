/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_here_doc.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: garside <garside@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/21 19:49:33 by garside           #+#    #+#             */
/*   Updated: 2025/06/04 18:55:31 by garside          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

void	made_new_file(int *fd, char **name)
{
	static int	nb_file = 0;
	char		*nb_str;

	nb_str = ft_itoa(nb_file);
	*name = ft_strjoin("/tmp/here_doc_", nb_str);
	free(nb_str);
	*fd = open(*name, O_RDWR | O_CREAT | O_TRUNC, 0644);
	nb_file++;
}

int	if_limiter(char *line, char *limiter)
{
	size_t	len;

	len = ft_strlen(line);
	if (len > 0 && line[len - 1] == '\n')
		line[len - 1] = '\0';
	if (ft_strcmp(line, limiter) == 0)
		return (0);
	return (1);
}

void	free_path(char *path_cmd)
{
	if (path_cmd != NULL)
		free(path_cmd);
}

int	fill_here_doc_file(int fd, char *delimitor)
{
	char	*line;

	setup_signal_heredoc();
	while (1)
	{
		write(1, "> ", 2);
		line = get_next_line(0);
		if (g_status == true)
			return (free_path(line), 0);
		if (line == NULL)
		{
			ft_printf("bash: warning: here-document delimited"
				" by end-of-file (wanted `%s')\n", delimitor);
			break ;
		}
		if (if_limiter(line, delimitor) == 0)
		{
			free(line);
			break ;
		}
		ft_putstr_fd(line, fd);
		ft_putchar_fd('\n', fd);
		free(line);
	}
	return (1);
}

char	*get_here_doc(char *str)
{
	char	*file_name;
	char	*delimitor;
	int		here_doc_fd;

	delimitor = ft_strdup(str);
	file_name = NULL;
	made_new_file(&here_doc_fd, &file_name);
	if (here_doc_fd == -1)
		return (ft_printf("error to create a tmp file\n"), NULL);
	fill_here_doc_file(here_doc_fd, delimitor);
	if (g_status == true)
		return (close(here_doc_fd), unlink(file_name), free(delimitor),
			free(file_name), NULL);
	free(delimitor);
	close(here_doc_fd);
	return (file_name);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lexer.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: garside <garside@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/14 18:38:51 by garside           #+#    #+#             */
/*   Updated: 2025/06/03 18:44:41 by garside          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

char	*handle_quotes_part(t_data *data, int *i, char *value)
{
	char	*tmp;
	char	*temp;

	tmp = handle_quotes(data, i);
	temp = ft_strjoin(value, tmp);
	free(tmp);
	free(value);
	return (temp);
}

t_token	*handle_cmd_or_arg(t_data *data, int *i)
{
	char	*value;
	t_token	*token;

	value = NULL;
	while (is_token_char(data->input[*i]))
	{
		if (data->input[*i] == '$')
			value = handle_env_value(data, i, value);
		else
		{
			value = handle_plain_text(data, i, value);
			if (data->input[*i] == '\'' || data->input[*i] == '\"')
				value = handle_quotes_part(data, i, value);
		}
	}
	token = new_token(value, WORD);
	free(value);
	return (token);
}

t_token	*handle_double_redir(char *input, int *i)
{
	if (input[*i] == '>' && input[*i + 1] == '>')
	{
		if (input[*i + 2] == '>')
		{
			ft_putstr_fd("syntax error near unexpected token `>>'\n", 2);
			return (NULL);
		}
		(*i) += 2;
		return (new_token(">>", APPEND));
	}
	if (input[*i] == '<' && input[*i + 1] == '<')
	{
		if (input[*i + 2] == '<')
		{
			ft_putstr_fd("syntax error near unexpected token `newline'\n", 2);
			return (NULL);
		}
		(*i) += 2;
		return (new_token("<<", HEREDOC));
	}
	return (NULL);
}

t_token	*handle_redirection(char *input, int *i)
{
	int		count;
	char	type;

	count = 0;
	type = input[*i];
	while (input[*i + count] == type)
		count++;
	if (count > 2)
		return (printf("%s '%c%c'\n", ERR_SYNT, type, type), NULL);
	if (count == 2)
	{
		if (type == '>')
			return (*i += 2, new_token(">>", APPEND));
		else if (type == '<')
			return (*i += 2, new_token("<<", HEREDOC));
	}
	else if (count == 1)
	{
		if (type == '>')
			return (*i += 1, new_token(">", REDIRECTION_OUT));
		else if (type == '<')
			return (*i += 1, new_token("<", REDIRECTION_IN));
	}
	return (NULL);
}

void	skip_whitespace(const char *input, int *i)
{
	while (input[*i] == ' ' || input[*i] == '\t')
		(*i)++;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lexer_utils_1.c                                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: garside <garside@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/29 18:49:50 by garside           #+#    #+#             */
/*   Updated: 2025/06/04 13:15:59 by garside          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

void	free_one_token(t_token *token)
{
	if (!token->value)
		return ;
	free(token->value);
	if (!token)
		return ;
	free(token);
}

void	free_token(t_token *head)
{
	t_token	*tmp;

	while (head != NULL)
	{
		tmp = head->next;
		if (!head)
			return ;
		free_one_token(head);
		head = tmp;
	}
}

t_token	*new_token(char *value, t_TokenType type)
{
	t_token	*token;

	token = malloc(sizeof(t_token));
	if (!token)
		return (NULL);
	token->value = ft_strdup(value);
	token->type = type;
	token->next = NULL;
	return (token);
}

char	*handle_error_code(t_data *data, char *value, int *i)
{
	char	*tmp;
	char	*temp;

	(void)data;
	(*i) += 2;
	tmp = ft_itoa(data->last_status);
	temp = ft_strjoin(value, tmp);
	free(tmp);
	if (value)
		free(value);
	value = temp;
	return (value);
}

void	add_token_to_list(t_token **head, t_token **last, t_token *new_token)
{
	if (!*head)
		*head = new_token;
	else
		(*last)->next = new_token;
	*last = new_token;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lexer_utils_2.c                                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: garside <garside@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/30 13:10:25 by garside           #+#    #+#             */
/*   Updated: 2025/06/03 18:44:38 by garside          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

int	is_skippable_char(char c)
{
	return (c && c != '|' && c != '<' && c != '>'
		&& c != ' ' && c != '\t' && c != '\'' && c != '\"' && c != '$');
}

int	is_token_char(char c)
{
	return (c && c != '|' && c != '<' && c != '>'
		&& c != ' ' && c != '\t');
}

char	*handle_env_value(t_data *data, int *i, char *value)
{
	char	*tmp;
	char	*temp;

	if (data->input[*i + 1] == '?')
		return (handle_error_code(data, value, i));
	tmp = change_env(data, i);
	temp = ft_strjoin(value, tmp);
	free(tmp);
	free(value);
	return (temp);
}

char	*handle_plain_text(t_data *data, int *i, char *value)
{
	int		start;
	int		len;
	char	*tmp;
	char	*temp;

	start = *i;
	while (is_skippable_char(data->input[*i]))
		(*i)++;
	len = *i - start;
	tmp = ft_substr(data->input, start, len);
	temp = ft_strjoin(value, tmp);
	free(tmp);
	free(value);
	return (temp);
}

t_token	*handle_pipe(int *i)
{
	char		*value;
	t_token		*token;

	value = ft_strdup("|");
	if (!value)
		return (NULL);
	token = new_token(value, PIPE);
	(*i)++;
	free(value);
	return (token);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_parce_util.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: garside <garside@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/13 08:47:16 by garside           #+#    #+#             */
/*   Updated: 2025/06/04 18:53:17 by garside          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

int	add_redir(t_redir **redir_list, char *filename, int type,
		int *skip_next_word)
{
	t_redir	*new_node;
	t_redir	*tmp;

	*skip_next_word = 1;
	new_node = malloc(sizeof(t_redir));
	if (!new_node)
		return (1);
	if (type == HEREDOC)
		new_node->file = get_here_doc(filename);
	else
		new_node->file = ft_strdup(filename);
	if (!new_node->file)
		return (free(new_node), -1);
	new_node->type = type;
	new_node->next = NULL;
	if (*redir_list == NULL)
		*redir_list = new_node;
	else
	{
		tmp = *redir_list;
		while (tmp->next)
			tmp = tmp->next;
		tmp->next = new_node;
	}
	return (0);
}

int	handle_redirection2(t_cmd *curr, t_token *token, int *skip_next_word)
{
	int	ret;

	ret = 0;
	if (!token->next)
		return (0);
	*skip_next_word = 1;
	if (token->type == REDIRECTION_IN)
		ret = add_redir(&curr->infile, token->next->value, REDIRECTION_IN,
				skip_next_word);
	else if (token->type == REDIRECTION_OUT)
		ret = add_redir(&curr->outfile, token->next->value, REDIRECTION_OUT,
				skip_next_word);
	else if (token->type == APPEND)
		ret = add_redir(&curr->outfile, token->next->value, APPEND,
				skip_next_word);
	else if (token->type == HEREDOC)
		ret = add_redir(&curr->infile, token->next->value, HEREDOC,
				skip_next_word);
	return (ret);
}

int	create_parse(t_token *token, t_cmd **curr, int *skip_next_word)
{
	int	ret;

	ret = 0;
	if (token->type == WORD)
		add_arg(*curr, token->value);
	else if (token->type == PIPE)
	{
		(*curr)->next = new_cmd_node();
		(*curr) = (*curr)->next;
	}
	else
	{
		ret = handle_redirection2(*curr, token, skip_next_word);
		if (ret == -1)
			return (-1);
	}
	return (ret);
}

int	loop_parse(t_token *token, t_cmd **curr, t_cmd **head, int *skip_next_word)
{
	int	ret;

	ret = 0;
	while (token)
	{
		if (!*curr)
		{
			*curr = new_cmd_node();
			if (!*head)
				*head = *curr;
		}
		if (*skip_next_word)
		{
			*skip_next_word = 0;
			token = token->next;
			continue ;
		}
		ret = create_parse(token, curr, skip_next_word);
		if (ret < 0)
			return (free_cmd_list2(*head), -1);
		token = token->next;
	}
	return (ret);
}

t_cmd	*parse_tokens(t_data *data)
{
	t_cmd	*head;
	t_cmd	*curr;
	t_token	*token;
	int		skip_next_word;

	head = NULL;
	curr = NULL;
	token = data->token;
	skip_next_word = 0;
	if (loop_parse(token, &curr, &head, &skip_next_word) < 0)
		return (NULL);
	return (head);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_parce_utils1.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: garside <garside@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/02 15:27:40 by garside           #+#    #+#             */
/*   Updated: 2025/06/04 18:54:48 by garside          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

void	free_redir_list(t_redir *redir)
{
	t_redir	*tmp;

	while (redir)
	{
		tmp = redir->next;
		if (redir->type == HEREDOC && redir->file)
			unlink(redir->file);
		if (redir->file)
			free(redir->file);
		free(redir);
		redir = tmp;
	}
}

void	free_cmd_list(t_data *data)
{
	t_cmd	*current;
	t_cmd	*next;

	if (!data || !data->cmd_list)
		return ;
	current = data->cmd_list;
	while (current)
	{
		next = current->next;
		if (current->outfile)
			free_redir_list(current->outfile);
		if (current->infile)
			free_redir_list(current->infile);
		if (current->args)
			free_split(current->args);
		free(current);
		current = next;
	}
	data->cmd_list = NULL;
}

t_cmd	*new_cmd_node(void)
{
	t_cmd	*cmd;

	cmd = malloc(sizeof(t_cmd));
	if (!cmd)
		return (NULL);
	cmd->args = NULL;
	cmd->path = NULL;
	cmd->infile = NULL;
	cmd->outfile = NULL;
	cmd->next = NULL;
	cmd->pipe_fd[0] = -1;
	cmd->pipe_fd[1] = -1;
	cmd->saved_stdin = -1;
	cmd->saved_stdout = -1;
	return (cmd);
}

void	free_cmd_list2(t_cmd *cmd)
{
	t_cmd	*current;
	t_cmd	*next;

	current = cmd;
	while (current)
	{
		next = current->next;
		if (current->outfile)
			free_redir_list(current->outfile);
		if (current->infile)
			free_redir_list(current->infile);
		if (current->args)
			free_split(current->args);
		free(current);
		current = next;
	}
}

void	add_arg(t_cmd *cmd, char *value)
{
	int		i;
	char	**new_args;

	i = 0;
	if (cmd->args)
	{
		while (cmd->args[i])
			i++;
	}
	new_args = malloc(sizeof(char *) * (i + 2));
	if (!new_args)
		return ;
	i = 0;
	if (cmd->args)
	{
		while (cmd->args[i])
		{
			new_args[i] = ft_strdup(cmd->args[i]);
			i++;
		}
		free_split(cmd->args);
	}
	new_args[i++] = ft_strdup(value);
	new_args[i] = NULL;
	cmd->args = new_args;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_parse1.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: garside <garside@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/02 15:34:00 by garside           #+#    #+#             */
/*   Updated: 2025/06/03 18:44:52 by garside          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

t_env	*env_new(char *name, char *value)
{
	t_env	*new_env;

	new_env = malloc(sizeof(t_env));
	if (!new_env)
		return (NULL);
	new_env->name = ft_strdup(name);
	if (value)
		new_env->content = ft_strdup(value);
	else
		new_env->content = NULL;
	new_env->next = NULL;
	new_env->prev = NULL;
	return (new_env);
}

void	free_env_list(t_env *new_list)
{
	t_env	*temp;

	while (new_list)
	{
		temp = new_list;
		new_list = new_list->next;
		free(temp->name);
		if (temp->content)
			free(temp->content);
		free(temp);
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_parse.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: garside <garside@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/02 14:13:50 by garside           #+#    #+#             */
/*   Updated: 2025/06/05 13:49:45 by garside          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

t_token	*get_next_token(t_data *data, int *i)
{
	if (data->input[*i] == '>' || data->input[*i] == '<')
		return (handle_redirection(data->input, i));
	if (data->input[*i] == '|')
		return (handle_pipe(i));
	return (handle_cmd_or_arg(data, i));
}

t_token *check_token_number(t_token *current)
{
	t_token *tmp;
	char **tab;
	int i;

	tmp = NULL;
	i = 0;
	if (!current || is_token_ok(current)) // ton test custom
		return (current);
	tab = ft_split(current->value, ' ');
	if (!tab)
		return (free_token(current), NULL);
	while (tab[i])
	{
		// add tab[i] -> end list tokens
		i++;
	}
	// free current
	return (tmp);
}

t_token	*ft_lexer(t_data *data)
{
	int		i;
	t_token	*head;
	t_token	*last;
	t_token	*current;

	i = 0;
	head = NULL;
	last = NULL;
	while (data->input[i])
	{
		skip_whitespace(data->input, &i);
		if (!data->input[i])
			break ;
		current = get_next_token(data, &i);
		if (!current)
			return (free_token(head), NULL);
		current = check_token_number(current);
		if (!current)
			return (free_token(head), NULL);
		add_token_to_list(&head, &last, current);
	}
	return (head);
}

void	print_tokens(t_data *data)
{
	t_token	*tmp = data->token;

	while (tmp)
	{
		printf("token value: %s type %d\n", tmp->value,
			tmp->type);
		tmp = tmp->next;
	}
}

int	valid_parse(t_data *data)
{
	t_token	*tmp;

	tmp = data->token;
	while (tmp)
	{
		if (tmp->type != WORD && !tmp->next && tmp->type != PIPE)
		{
			g_status = 2;
			return (printf("%s `newline`\n", ERR_SYNT), 1);
		}
		if (tmp->type == PIPE && tmp->next && tmp->next->type == PIPE)
		{
			g_status = 2;
			return (printf("%s `|`\n", ERR_SYNT), 1);
		}
		if ((tmp->type != WORD && tmp->type != PIPE) && (tmp->next
				&& tmp->next->type != WORD))
		{
			g_status = 2;
			return (printf("%s `%s`\n", ERR_SYNT, tmp->next->value), 1);
		}
		tmp = tmp->next;
	}
	return (0);
}

int	parse(t_data *data)
{
	t_token	*token;

	if (!data->input)
		return (1);
	data->token = ft_lexer(data);
	if (!data->token)
		return (1);
	print_tokens(data);
	if (valid_parse(data) == 1)
		return (1);
	token = data->token;
	if (token->type == PIPE)
		return (printf("%s `|'\n", ERR_SYNT), 1);
	while (token && token->next)
		token = token->next;
	if (token->type == PIPE)
		return (g_status = 2, printf("%s `|'\n", ERR_SYNT), 1);
	data->cmd_list = parse_tokens(data);
	if (!data->cmd_list)
		return (1);
	if (!data->cmd_list->args && !data->cmd_list->outfile
		&& !data->cmd_list->infile)
		return (1);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_quote.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: garside <garside@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/14 18:38:39 by garside           #+#    #+#             */
/*   Updated: 2025/06/03 18:44:58 by garside          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

char	*append_env_variable(t_data *data, char *extract, int *i, int *first)
{
	int		last;
	char	*teemp;
	char	*tmp;
	char	*temp;

	last = *i;
	teemp = ft_substr(data->input, *first + 1, last - *first - 1);
	tmp = change_env(data, i);
	*first = *i - 1;
	temp = ft_strjoin(teemp, tmp);
	free(teemp);
	free(tmp);
	teemp = ft_strjoin(extract, temp);
	free(temp);
	free(extract);
	return (teemp);
}

char	*append_remaining_segment(t_data *data, char *extract, int first, int i)
{
	char	*tmp;
	char	*temp;

	tmp = ft_substr(data->input, first + 1, i - first - 1);
	temp = ft_strjoin(extract, tmp);
	free(tmp);
	free(extract);
	return (temp);
}

char	*extract_word_double(t_data *data, int *i)
{
	int		first;
	char	*extract;

	extract = NULL;
	first = (*i)++;
	while (data->input[*i] && data->input[*i] != '\"')
	{
		if (data->input[*i] == '$')
		{
			if (data->input[*i + 1] == '?')
				extract = append_error_code(data, extract, i, &first);
			else
				extract = append_env_variable(data, extract, i, &first);
		}
		else
			(*i)++;
	}
	extract = append_remaining_segment(data, extract, first, *i);
	(*i)++;
	return (extract);
}

char	*extract_word_single(char *input, int *i)
{
	int		first;
	int		last;
	char	*extract;

	first = (*i);
	(*i)++;
	while (input[*i] != '\'')
		(*i)++;
	last = (*i);
	extract = ft_substr(input, first + 1, (last - first - 1));
	(*i)++;
	return (extract);
}

char	*handle_quotes(t_data *data, int *i)
{
	char	*word;

	word = NULL;
	if (data->input[*i] && data->input[*i] == '\"')
		word = extract_word_double(data, i);
	else if (data->input[*i] == '\'')
		word = extract_word_single(data->input, i);
	return (word);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_quote_utils_1.c                                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: garside <garside@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/30 13:35:05 by garside           #+#    #+#             */
/*   Updated: 2025/06/03 18:44:56 by garside          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../../includes/minishell.h"

int	check_quotes(char *input)
{
	int	i;

	i = 0;
	while (input[i])
	{
		if (input[i] == '\'')
		{
			i++;
			while (input[i] && (input[i] != '\''))
				i++;
			if (!input[i])
				return (ft_putstr_fd("quote error\n", 2), 1);
		}
		if (input[i] == '\"')
		{
			i++;
			while (input[i] && (input[i] != '\"'))
				i++;
			if (!input[i])
				return (ft_putstr_fd("quote error\n", 2), 1);
		}
		i++;
	}
	return (0);
}

char	*ft_get_env(char *str, t_data *data)
{
	t_env	*current;
	char	*value;
	int		len;

	current = data->env;
	len = ft_strlen(str);
	while (current)
	{
		if (ft_strcmp(str, current->name) == 0)
		{
			value = ft_strdup(current->content);
			return (value);
		}
		current = current->next;
	}
	return (NULL);
}

char	*change_env(t_data *data, int *i)
{
	int		first;
	int		last;
	char	*name;
	char	*value;

	(*i)++;
	first = (*i);
	while (ft_isalnum(data->input[*i]) || data->input[*i] == '_')
		(*i)++;
	last = (*i);
	name = ft_substr(data->input, first, last - first);
	if (!name[0])
		return (free(name), ft_strdup("$"));
	value = ft_get_env(name, data);
	free(name);
	return (value);
}

char	*append_error_code(t_data *data, char *extract, int *i, int *first)
{
	int		last;
	char	*tmp;
	char	*temp;

	last = *i;
	tmp = ft_substr(data->input, *first + 1, last - *first - 1);
	temp = ft_strjoin(extract, tmp);
	free(tmp);
	free(extract);
	extract = handle_error_code(data, temp, i);
	*first = *i - 1;
	return (extract);
}
